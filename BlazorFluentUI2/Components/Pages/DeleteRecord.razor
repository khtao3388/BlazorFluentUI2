@page "/bloodpressures/delete"
@inject BloodPressureContext context
@inject NavigationManager navigationManager


<h3>DeleteRecord</h3>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>BloodPressure</h4>
    <hr />
    @if (bloodPressure is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@bloodPressure.DateAndTime.ToString("dd mmm yyyy HH:mm")</dd>
        </dl>
 
        <dl class="row">
            <dt class="col-sm-2">Systolic</dt>
            <dd class="col-sm-10">@bloodPressure.Systolic</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Diastolic</dt>
            <dd class="col-sm-10">@bloodPressure.Diastolic</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HeartRate</dt>
            <dd class="col-sm-10">@bloodPressure.HeartRate</dd>
        </dl>
        <EditForm method="post" Model="bloodPressure" OnValidSubmit="DeleteBloodPressure" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(bloodPressure is null)">Delete</button> |
            <a href="/bloodpressures">Back to List</a>
        </EditForm>
    }
</div>


@code {
    BloodPressure? bloodPressure;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        bloodPressure = await context.BloodPressures.FirstOrDefaultAsync(m => m.Id == Id);

        if (bloodPressure is null)
        {
            navigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteBloodPressure()
    {
        
        context.BloodPressures.Remove(bloodPressure!);
        await context.SaveChangesAsync();
        navigationManager.NavigateTo("/bloodpressures");
    }


}
